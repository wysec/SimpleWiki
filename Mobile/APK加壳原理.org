
[[http://blog.csdn.net/jiangwei0910410003/article/details/48415225][Android中的Apk的加固/加壳原理解析和实现]]


我们在加固的过程中需要三个对象：
1.需要加密的Apk(源Apk)
2.壳程序Apk(负责解密Apk工作)
3.加密工具(将源Apk进行加密和壳Dex合并成新的Dex)




主要步骤：
我们拿到需要加密的Apk和自己的壳程序Apk，然后用加密算法对源Apk进行加密在将壳Apk进行合并得到新的Dex文件，最后替换壳程序中的dex文件即可，得到新的Apk,那么这个新的Apk我们也叫作脱壳程序Apk.他已经不是一个完整意义上的Apk程序了，他的主要工作是：负责解密源Apk.然后加载Apk,让其正常运行起来。


关键点： *如何将源Apk和壳Apk进行合并成新的Dex。*

需先了解Dex文件格式。

下面是Dex文件头信息：
file:./img/apk1.png
主要关注上面红色标记的三个部分：
1) *checksum* : 文件校验码 ，使用alder32 算法校验文件除去 maigc ，checksum 外余下的所有文件区域 ，用于检查文件错误 。
2) *signature* : 使用 SHA-1 算法 hash 除去 magic ,checksum 和 signature 外余下的所有文件区域 ，用于唯一识别本文件 。
3) *file_size* : Dex 文件的大小 。


我们需要将一个文件(加密之后的源Apk)写入到Dex中，那么我们肯定需要修改文件校验码(checksum).因为他是检查文件是否有错误。那么signature也是一样，也是唯一识别文件的算法。还有就是需要修改dex文件的大小。


不过这里还需要一个操作，就是标注一下我们加密的Apk的大小，因为我们在脱壳的时候，需要知道Apk的大小，才能正确的得到Apk。那么这个值放到哪呢？这个值直接放到文件的末尾就可以了。


所以我们需要做的是： 修改Dex的三个文件头，将源Apk的大小追加到壳dex的末尾就可以了。


我们修改之后得到新的Dex文件样式如下：
file:./img/apk2.png


那么我们知道原理了，下面就是代码实现了。所以这里有三个工程：
1、源程序项目(需要加密的Apk)
2、脱壳项目(解密源Apk和加载Apk)
3、对源Apk进行加密和脱壳项目的Dex的合并





